exit
cache.write("last_event", 0)
last_event
n
m
c
n
c
Rails.cache.write("last_event", Event.last.id||0)
Event.last.
Rails.cache.write("last_event", Event.last.id)
Rails.cache
exit
Event.first
n
c
n
Event.first
Event
c
n
exit
n
exit
params.except("controller", "action").to_h
params.except("controller").to_h
params.except("controller")
params
exit
xit
session_ide
exit
xit
target_ide
session_id
exit
start_time
n
psap
n
params
c
params
params['TCS.QueryConversationHistory']
params['TCS.QueryConversationHistory'.to_sym]
exit
Runtime.delete_all
Runtime.create mes
exit
Runtime.create mes
Runtime
Runtime.first
mes
c
n
exit
n
c
n
c
n
c
exit
content["TCS.messsages"]
content
c
messages
n
c
n
exit
4.times{|it| p it }
4.times do{|it| p it }
4.times do |it|
messages
c
n
c
n
c
n
c
n
c
n
c
n
iter
c
Faker::Lorem.sentence
Faker::PhoneNumber.phone_number.gsub(/\sx.*/,"").gsub(/[()-.]/, "")
Faker::PhoneNumber.phone_number.gsub(/\sx.*/,"").gsub(/[()-]/, "")
Faker::PhoneNumber.phone_number.gsub(/\sx.*/,"")
Faker::PhoneNumber.phone_number
Faker::PhoneNumber
ap JSON.parse(sess_string)
id_pool = 5.times.map{|f| Faker::Number.hexadecimal(24).upcase }
id_pool = 5.times(Faker::Number.hexadecimal(24).upcase)
5.times.map{|f| rand(f)}
JSON.parse(sess_string)
sess_string
Faker
hash["TCS.psapid"] = HOME_PSAP
hash["TCS.psapid"]
hash = JSON.parse(sess_string)
JSON.parse(sess_string)
sess_string
c
content
ontent
n
nc
c
n
source
 source
sourcep
c
content
JSON.generate content
params["TCS.TransferSession"]
params.class
JSON.parse params
params
source_id
n
c
JSON.parse(json_string)
json_string
JSON.generate(json_string)
json_string
n
exit
n
c
YAML.load_file('lib/documents/complete_transfer.json')
system "ls lib/documents"
system "ls lib/documents
YAML.load_file('lib/documents/complete_transfer.yml')
YAML.load_file('lib/documents/complete_transfer.yml'
url
n
c
th
th.alive?
Thread.list
th list
th
exit
thread = Thread.new{|f| sleep 2}
thread = Thread.new{|f| sleep 2; p 'over'}
thread = Thread.new{sleep 2; p 'over'}
session_id
exit
rat = json_obj["TCS.QueryConversationHistoryResult"].delete "TCS.messages"c
json_obj
rat
rat = json_obj["TCS.QueryConversationHistoryResult"].delete "TCS.messages"
rat = json_obj["TCS.QueryConversationHistoryResult"]["TCS.messages"]
rat
rat = json_obj["TCS.QueryConversationHistoryResult"].delete ["TCS.messages"]
json_obj
json_obj["TCS.QueryConversationHistoryResult"].delete ["TCS.messages"]
json_obj
json_obj["TCS.QueryConversationHistoryResult"]["TCS.messages"].delete
json_obj["TCS.QueryConversationHistoryResult"]["TCS.messages"]
json_obj.delete(["TCS.QueryConversationHistoryResult"]["TCS.messages"])
json.obj.delete(["TCS.QueryConversationHistoryResult"]["TCS.messages"])
exit
messages
c
messages
exit
message
message["TCS.date"] = rep
message["TCS.date"]
message
n
message
exit
json_obj["TCS.QueryConversationHistoryResult"]["TCS.messages"] == messages
messages
json_obj["TCS.QueryConversationHistoryResult"]["TCS.messages"]
messages
exit
message
n
message
exit
c
message
json_obj
rep
c
rep
c
rep
c
json_obj
c
json_obj
exit
json_obj
n
rep
n
exit
c
2.minutes.ago.to_formatted_s(:db) + " UTC"
2.minutes.ago.to_formatted_s(:db)
2.minutes.ago.to_formatted(:db)
2.minutes.ago
json_obj["TCS.QueryConversationHistoryResult"]["TCS.messages"].first
rep
n
c
n
json_obj = JSON.parse(File.read file)
json_obj
json_obj["TCS.QueryConversationHistoryResult"]["TCS.messages"] = arr
json_obj["TCS.QueryConversationHistoryResult"]["TCS.messages"]
json_obj["TCS.QueryConversationHistoryResult"].keys
json_obj.keys
arr.first
arr
n
json_obj
n
json_obj
n
json_obj
n
rep
n
json_obj
n
file
c
json_obj
c
render json: json_obj
json_obj
json.obj
c
str
JSON.parse(str)
str = JSON.generate(json_obj)
JSON.generate(json_obj)
JSON.generate(json_obj.to_s)
json_obj.to_s
json_obj.class
c
n
c
resp.body
resp = http.start {|htt|htt.request(req) }
